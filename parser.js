var result = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successful,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var parseFunctions = {
        "start": parse_start
      };
      
      var options = arguments.length > 1 ? arguments[1] : {},
          startRule;
      
      if (options.startRule !== undefined) {
        startRule = options.startRule;
        
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Can't start parsing from rule " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportedPos = 0;
      var cachedReportedPos = 0;
      var cachedReportedPosDetails = { line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function computeReportedPosDetails() {
        function advanceCachedReportedPos() {
          var ch;
          
          for (; cachedReportedPos < reportedPos; cachedReportedPos++) {
            ch = input.charAt(cachedReportedPos);
            if (ch === "\n") {
              if (!cachedReportedPosDetails.seenCR) { cachedReportedPosDetails.line++; }
              cachedReportedPosDetails.column = 1;
              cachedReportedPosDetails.seenCR = false;
            } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
              cachedReportedPosDetails.line++;
              cachedReportedPosDetails.column = 1;
              cachedReportedPosDetails.seenCR = true;
            } else {
              cachedReportedPosDetails.column++;
              cachedReportedPosDetails.seenCR = false;
            }
          }
        }
        
        if (cachedReportedPos !== reportedPos) {
          if (cachedReportedPos > reportedPos) {
            cachedReportedPos = 0;
            cachedReportedPosDetails = { line: 1, column: 1, seenCR: false };
          }
          advanceCachedReportedPos();
        }
        
        return cachedReportedPosDetails;
      }
      
      function text() {
        return input.substring(reportedPos, pos);
      }
      
      function offset() {
        return reportedPos;
      }
      
      function line() {
        return computeReportedPosDetails().line;
      }
      
      function column() {
        return computeReportedPosDetails().column;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = "start@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1;
        
        r1 = pos;
        r0 = parse_selectors();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(ss) { return ss.length === 1 ? ss[0] : { type: 'matches', selectors: ss }; })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r0 = "";
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return void 0; })();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse__() {
        var cacheKey = "_@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1;
        
        r0 = [];
        if (input.charCodeAt(pos) === 32) {
          r1 = " ";
          pos++;
        } else {
          r1 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        while (r1 !== null) {
          r0.push(r1);
          if (input.charCodeAt(pos) === 32) {
            r1 = " ";
            pos++;
          } else {
            r1 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_identifierName() {
        var cacheKey = "identifierName@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2;
        
        r1 = pos;
        if (/^[^ [\],():#!=><~+.]/.test(input.charAt(pos))) {
          r2 = input.charAt(pos);
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("[^ [\\],():#!=><~+.]");
          }
        }
        if (r2 !== null) {
          r0 = [];
          while (r2 !== null) {
            r0.push(r2);
            if (/^[^ [\],():#!=><~+.]/.test(input.charAt(pos))) {
              r2 = input.charAt(pos);
              pos++;
            } else {
              r2 = null;
              if (reportFailures === 0) {
                matchFailed("[^ [\\],():#!=><~+.]");
              }
            }
          }
        } else {
          r0 = null;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(i) { return i.join(''); })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_binaryOp() {
        var cacheKey = "binaryOp@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse__();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 62) {
            r4 = ">";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\">\"");
            }
          }
          if (r4 !== null) {
            r5 = parse__();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return 'child'; })();
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse__();
          if (r3 !== null) {
            if (input.charCodeAt(pos) === 126) {
              r4 = "~";
              pos++;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"~\"");
              }
            }
            if (r4 !== null) {
              r5 = parse__();
              if (r5 !== null) {
                r0 = [r3, r4, r5];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return 'sibling'; })();
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            r3 = parse__();
            if (r3 !== null) {
              if (input.charCodeAt(pos) === 43) {
                r4 = "+";
                pos++;
              } else {
                r4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"+\"");
                }
              }
              if (r4 !== null) {
                r5 = parse__();
                if (r5 !== null) {
                  r0 = [r3, r4, r5];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function() { return 'adjacent'; })();
            }
            if (r0 === null) {
              pos = r1;
            }
            if (r0 === null) {
              r1 = pos;
              r2 = pos;
              if (input.charCodeAt(pos) === 32) {
                r3 = " ";
                pos++;
              } else {
                r3 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
              if (r3 !== null) {
                r4 = parse__();
                if (r4 !== null) {
                  r0 = [r3, r4];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
              if (r0 !== null) {
                reportedPos = r1;
                r0 = (function() { return 'descendant'; })();
              }
              if (r0 === null) {
                pos = r1;
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_selectors() {
        var cacheKey = "selectors@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_selector();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse__();
          if (r7 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r8 = ",";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r8 !== null) {
              r9 = parse__();
              if (r9 !== null) {
                r10 = parse_selector();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse__();
            if (r7 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r8 = ",";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r8 !== null) {
                r9 = parse__();
                if (r9 !== null) {
                  r10 = parse_selector();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(s, ss) {
          return [s].concat(ss.map(function (s) { return s[3]; }));
        })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_selector() {
        var cacheKey = "selector@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_sequence();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse_binaryOp();
          if (r7 !== null) {
            r8 = parse_sequence();
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse_binaryOp();
            if (r7 !== null) {
              r8 = parse_sequence();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a, ops) {
            return ops.reduce(function (memo, rhs) {
              return { type: rhs[0], left: memo, right: rhs[1] };
            }, a);
          })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_sequence() {
        var cacheKey = "sequence@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r3 = pos;
        r4 = pos;
        r5 = parse_atom();
        if (r5 !== null) {
          if (input.charCodeAt(pos) === 33) {
            r6 = "!";
            pos++;
          } else {
            r6 = null;
            if (reportFailures === 0) {
              matchFailed("\"!\"");
            }
          }
          r6 = r6 !== null ? r6 : "";
          if (r6 !== null) {
            r2 = [r5, r6];
          } else {
            r2 = null;
            pos = r4;
          }
        } else {
          r2 = null;
          pos = r4;
        }
        if (r2 !== null) {
          reportedPos = r3;
          r2 = (function(a, s) { if(s) a.subject = true; return a; })(r5, r6);
        }
        if (r2 === null) {
          pos = r3;
        }
        if (r2 !== null) {
          r0 = [];
          while (r2 !== null) {
            r0.push(r2);
            r3 = pos;
            r4 = pos;
            r5 = parse_atom();
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 33) {
                r6 = "!";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\"!\"");
                }
              }
              r6 = r6 !== null ? r6 : "";
              if (r6 !== null) {
                r2 = [r5, r6];
              } else {
                r2 = null;
                pos = r4;
              }
            } else {
              r2 = null;
              pos = r4;
            }
            if (r2 !== null) {
              reportedPos = r3;
              r2 = (function(a, s) { if(s) a.subject = true; return a; })(r5, r6);
            }
            if (r2 === null) {
              pos = r3;
            }
          }
        } else {
          r0 = null;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(bs) {
            return bs.length === 1 ? bs[0] : { type: 'compound', selectors: bs };
          })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_atom() {
        var cacheKey = "atom@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0;
        
        r0 = parse_wildcard();
        if (r0 === null) {
          r0 = parse_identifier();
          if (r0 === null) {
            r0 = parse_attr();
            if (r0 === null) {
              r0 = parse_field();
              if (r0 === null) {
                r0 = parse_negation();
                if (r0 === null) {
                  r0 = parse_matches();
                  if (r0 === null) {
                    r0 = parse_firstChild();
                    if (r0 === null) {
                      r0 = parse_lastChild();
                      if (r0 === null) {
                        r0 = parse_nthChild();
                        if (r0 === null) {
                          r0 = parse_nthLastChild();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_wildcard() {
        var cacheKey = "wildcard@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 42) {
          r0 = "*";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a) { return { type: 'wildcard', value: a }; })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_identifier() {
        var cacheKey = "identifier@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 35) {
          r3 = "#";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        r3 = r3 !== null ? r3 : "";
        if (r3 !== null) {
          r4 = parse_identifierName();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(i) { return { type: 'identifier', value: i.toLowerCase() }; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_attr() {
        var cacheKey = "attr@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 91) {
          r3 = "[";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_attrValue();
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 93) {
                  r7 = "]";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"]\"");
                  }
                }
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(v) { return v; })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_attrOps() {
        var cacheKey = "attrOps@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        if (/^[><!]/.test(input.charAt(pos))) {
          r3 = input.charAt(pos);
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("[><!]");
          }
        }
        r3 = r3 !== null ? r3 : "";
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 61) {
            r4 = "=";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a) { return a + '='; })(r3);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          if (/^[><]/.test(input.charAt(pos))) {
            r0 = input.charAt(pos);
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("[><]");
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_attrEqOps() {
        var cacheKey = "attrEqOps@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 33) {
          r3 = "!";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"!\"");
          }
        }
        r3 = r3 !== null ? r3 : "";
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 61) {
            r4 = "=";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a) { return a + '='; })(r3);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_attrName() {
        var cacheKey = "attrName@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2;
        
        r1 = pos;
        r2 = parse_identifierName();
        if (r2 === null) {
          if (input.charCodeAt(pos) === 46) {
            r2 = ".";
            pos++;
          } else {
            r2 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
        }
        if (r2 !== null) {
          r0 = [];
          while (r2 !== null) {
            r0.push(r2);
            r2 = parse_identifierName();
            if (r2 === null) {
              if (input.charCodeAt(pos) === 46) {
                r2 = ".";
                pos++;
              } else {
                r2 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
            }
          }
        } else {
          r0 = null;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(i) { return i.join(''); })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_attrValue() {
        var cacheKey = "attrValue@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_attrName();
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_attrEqOps();
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r7 = parse_type();
                if (r7 === null) {
                  r7 = parse_regex();
                }
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(name, op, value) {
              return { type: 'attribute', name: name, operator: op, value: value };
            })(r3, r5, r7);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_attrName();
          if (r3 !== null) {
            r4 = parse__();
            if (r4 !== null) {
              r5 = parse_attrOps();
              if (r5 !== null) {
                r6 = parse__();
                if (r6 !== null) {
                  r7 = parse_string();
                  if (r7 === null) {
                    r7 = parse_number();
                    if (r7 === null) {
                      r7 = parse_path();
                    }
                  }
                  if (r7 !== null) {
                    r0 = [r3, r4, r5, r6, r7];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(name, op, value) {
                return { type: 'attribute', name: name, operator: op, value: value };
              })(r3, r5, r7);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r0 = parse_attrName();
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function(name) { return { type: 'attribute', name: name }; })(r0);
            }
            if (r0 === null) {
              pos = r1;
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_string() {
        var cacheKey = "string@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 34) {
          r3 = "\"";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (r3 !== null) {
          r4 = [];
          if (/^[^\\"]/.test(input.charAt(pos))) {
            r5 = input.charAt(pos);
            pos++;
          } else {
            r5 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\\\\"]");
            }
          }
          if (r5 === null) {
            r6 = pos;
            r7 = pos;
            if (input.charCodeAt(pos) === 92) {
              r8 = "\\";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (r8 !== null) {
              if (input.length > pos) {
                r9 = input.charAt(pos);
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (r9 !== null) {
                r5 = [r8, r9];
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(a, b) { return a + b; })(r8, r9);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          while (r5 !== null) {
            r4.push(r5);
            if (/^[^\\"]/.test(input.charAt(pos))) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\\\\"]");
              }
            }
            if (r5 === null) {
              r6 = pos;
              r7 = pos;
              if (input.charCodeAt(pos) === 92) {
                r8 = "\\";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (r8 !== null) {
                if (input.length > pos) {
                  r9 = input.charAt(pos);
                  pos++;
                } else {
                  r9 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
                if (r9 !== null) {
                  r5 = [r8, r9];
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
              if (r5 !== null) {
                reportedPos = r6;
                r5 = (function(a, b) { return a + b; })(r8, r9);
              }
              if (r5 === null) {
                pos = r6;
              }
            }
          }
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 34) {
              r5 = "\"";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(d) {
                return { type: 'literal', value: strUnescape(d.join('')) };
              })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 39) {
            r3 = "'";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            if (/^[^\\']/.test(input.charAt(pos))) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\\\']");
              }
            }
            if (r5 === null) {
              r6 = pos;
              r7 = pos;
              if (input.charCodeAt(pos) === 92) {
                r8 = "\\";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (r8 !== null) {
                if (input.length > pos) {
                  r9 = input.charAt(pos);
                  pos++;
                } else {
                  r9 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
                if (r9 !== null) {
                  r5 = [r8, r9];
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
              if (r5 !== null) {
                reportedPos = r6;
                r5 = (function(a, b) { return a + b; })(r8, r9);
              }
              if (r5 === null) {
                pos = r6;
              }
            }
            while (r5 !== null) {
              r4.push(r5);
              if (/^[^\\']/.test(input.charAt(pos))) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\\\']");
                }
              }
              if (r5 === null) {
                r6 = pos;
                r7 = pos;
                if (input.charCodeAt(pos) === 92) {
                  r8 = "\\";
                  pos++;
                } else {
                  r8 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\\\"");
                  }
                }
                if (r8 !== null) {
                  if (input.length > pos) {
                    r9 = input.charAt(pos);
                    pos++;
                  } else {
                    r9 = null;
                    if (reportFailures === 0) {
                      matchFailed("any character");
                    }
                  }
                  if (r9 !== null) {
                    r5 = [r8, r9];
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
                if (r5 !== null) {
                  reportedPos = r6;
                  r5 = (function(a, b) { return a + b; })(r8, r9);
                }
                if (r5 === null) {
                  pos = r6;
                }
              }
            }
            if (r4 !== null) {
              if (input.charCodeAt(pos) === 39) {
                r5 = "'";
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("\"'\"");
                }
              }
              if (r5 !== null) {
                r0 = [r3, r4, r5];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(d) {
                  return { type: 'literal', value: strUnescape(d.join('')) };
                })(r4);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_number() {
        var cacheKey = "number@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        r5 = [];
        if (/^[0-9]/.test(input.charAt(pos))) {
          r6 = input.charAt(pos);
          pos++;
        } else {
          r6 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        while (r6 !== null) {
          r5.push(r6);
          if (/^[0-9]/.test(input.charAt(pos))) {
            r6 = input.charAt(pos);
            pos++;
          } else {
            r6 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
        }
        if (r5 !== null) {
          if (input.charCodeAt(pos) === 46) {
            r6 = ".";
            pos++;
          } else {
            r6 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (r6 !== null) {
            r3 = [r5, r6];
          } else {
            r3 = null;
            pos = r4;
          }
        } else {
          r3 = null;
          pos = r4;
        }
        r3 = r3 !== null ? r3 : "";
        if (r3 !== null) {
          if (/^[0-9]/.test(input.charAt(pos))) {
            r5 = input.charAt(pos);
            pos++;
          } else {
            r5 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (r5 !== null) {
            r4 = [];
            while (r5 !== null) {
              r4.push(r5);
              if (/^[0-9]/.test(input.charAt(pos))) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            r4 = null;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a, b) {
                return { type: 'literal', value: parseFloat((a ? a.join('') : '') + b.join('')) };
              })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_path() {
        var cacheKey = "path@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1;
        
        r1 = pos;
        r0 = parse_identifierName();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(i) { return { type: 'literal', value: i }; })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_type() {
        var cacheKey = "type@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 5) === "type(") {
          r3 = "type(";
          pos += 5;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"type(\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            if (/^[^ )]/.test(input.charAt(pos))) {
              r6 = input.charAt(pos);
              pos++;
            } else {
              r6 = null;
              if (reportFailures === 0) {
                matchFailed("[^ )]");
              }
            }
            if (r6 !== null) {
              r5 = [];
              while (r6 !== null) {
                r5.push(r6);
                if (/^[^ )]/.test(input.charAt(pos))) {
                  r6 = input.charAt(pos);
                  pos++;
                } else {
                  r6 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^ )]");
                  }
                }
              }
            } else {
              r5 = null;
            }
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  r7 = ")";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(t) { return { type: 'type', value: t.join('') }; })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_regex() {
        var cacheKey = "regex@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 47) {
          r3 = "/";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"/\"");
          }
        }
        if (r3 !== null) {
          if (/^[^\/]/.test(input.charAt(pos))) {
            r5 = input.charAt(pos);
            pos++;
          } else {
            r5 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\/]");
            }
          }
          if (r5 !== null) {
            r4 = [];
            while (r5 !== null) {
              r4.push(r5);
              if (/^[^\/]/.test(input.charAt(pos))) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\/]");
                }
              }
            }
          } else {
            r4 = null;
          }
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 47) {
              r5 = "/";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(d) { return { type: 'regexp', value: new RegExp(d.join('')) }; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_field() {
        var cacheKey = "field@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 46) {
          r3 = ".";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_identifierName();
          if (r4 !== null) {
            r5 = [];
            r7 = pos;
            if (input.charCodeAt(pos) === 46) {
              r8 = ".";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (r8 !== null) {
              r9 = parse_identifierName();
              if (r9 !== null) {
                r6 = [r8, r9];
              } else {
                r6 = null;
                pos = r7;
              }
            } else {
              r6 = null;
              pos = r7;
            }
            while (r6 !== null) {
              r5.push(r6);
              r7 = pos;
              if (input.charCodeAt(pos) === 46) {
                r8 = ".";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (r8 !== null) {
                r9 = parse_identifierName();
                if (r9 !== null) {
                  r6 = [r8, r9];
                } else {
                  r6 = null;
                  pos = r7;
                }
              } else {
                r6 = null;
                pos = r7;
              }
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(i, is) {
          return { type: 'field', name: is.reduce(function(memo, p){ return memo + p[0] + p[1]; }, i)};
        })(r4, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_negation() {
        var cacheKey = "negation@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 5) === ":not(") {
          r3 = ":not(";
          pos += 5;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\":not(\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_selectors();
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  r7 = ")";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(ss) { return { type: 'not', selectors: ss }; })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_matches() {
        var cacheKey = "matches@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 9) === ":matches(") {
          r3 = ":matches(";
          pos += 9;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\":matches(\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_selectors();
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  r7 = ")";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(ss) { return { type: 'matches', selectors: ss }; })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_firstChild() {
        var cacheKey = "firstChild@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1;
        
        r1 = pos;
        if (input.substr(pos, 12) === ":first-child") {
          r0 = ":first-child";
          pos += 12;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\":first-child\"");
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return nth(1); })();
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_lastChild() {
        var cacheKey = "lastChild@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1;
        
        r1 = pos;
        if (input.substr(pos, 11) === ":last-child") {
          r0 = ":last-child";
          pos += 11;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\":last-child\"");
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return nthLast(1); })();
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_nthChild() {
        var cacheKey = "nthChild@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 11) === ":nth-child(") {
          r3 = ":nth-child(";
          pos += 11;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\":nth-child(\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            if (/^[0-9]/.test(input.charAt(pos))) {
              r6 = input.charAt(pos);
              pos++;
            } else {
              r6 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (r6 !== null) {
              r5 = [];
              while (r6 !== null) {
                r5.push(r6);
                if (/^[0-9]/.test(input.charAt(pos))) {
                  r6 = input.charAt(pos);
                  pos++;
                } else {
                  r6 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              r5 = null;
            }
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  r7 = ")";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(n) { return nth(parseInt(n.join(''), 10)); })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      function parse_nthLastChild() {
        var cacheKey = "nthLastChild@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 16) === ":nth-last-child(") {
          r3 = ":nth-last-child(";
          pos += 16;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\":nth-last-child(\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            if (/^[0-9]/.test(input.charAt(pos))) {
              r6 = input.charAt(pos);
              pos++;
            } else {
              r6 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (r6 !== null) {
              r5 = [];
              while (r6 !== null) {
                r5.push(r6);
                if (/^[0-9]/.test(input.charAt(pos))) {
                  r6 = input.charAt(pos);
                  pos++;
                } else {
                  r6 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              r5 = null;
            }
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  r7 = ")";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(n) { return nthLast(parseInt(n.join(''), 10)); })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  r0
        };
        return r0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
        function nth(n) { return { type: 'nth-child', index: { type: 'literal', value: n } }; }
        function nthLast(n) { return { type: 'nth-last-child', index: { type: 'literal', value: n } }; }
        function strUnescape(s) {
          return s.replace(/\\(.)/g, function(match, ch) {
            switch(ch) {
              case 'a': return '\a';
              case 'b': return '\b';
              case 'f': return '\f';
              case 'n': return '\n';
              case 'r': return '\r';
              case 't': return '\t';
              case 'v': return '\v';
              default: return ch;
            }
          });
        }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        reportedPos = Math.max(pos, rightmostFailuresPos);
        var found = reportedPos < input.length ? input.charAt(reportedPos) : null;
        var reportedPosDetails = computeReportedPosDetails();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          reportedPos,
          reportedPosDetails.line,
          reportedPosDetails.column
        );
      }
      
      return result;
    }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  subclass(result.SyntaxError, Error);
  
  return result;
})();
if (typeof define === "function" && define.amd) { define(function(){ return result; }); } else if (typeof module !== "undefined" && module.exports) { module.exports = result; } else { this.esquery = result; }
